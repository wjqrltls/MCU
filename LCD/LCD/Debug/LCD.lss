
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000009ea  00000a7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800126  00800126  00000aa4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001213  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b17  00000000  00000000  00001e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000755  00000000  00000000  0000291a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00003070  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000527  00000000  00000000  000031c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000060d  00000000  00000000  000036ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003cfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	7d c1       	rjmp	.+762    	; 0x374 <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ee       	ldi	r30, 0xEA	; 234
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 32       	cpi	r26, 0x26	; 38
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e2       	ldi	r26, 0x26	; 38
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 33       	cpi	r26, 0x3D	; 61
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	09 d0       	rcall	.+18     	; 0xd6 <main>
  c4:	90 c4       	rjmp	.+2336   	; 0x9e6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <sensor_INIT>:
#define RED_PORT 2
#define GREEN_PORT 3
#define SWITCH_PIN 4

void sensor_INIT(){
	PIR_LED_DDR &= (1 << PIR_PIN) | (1 << SWITCH_PIN);
  c8:	84 b3       	in	r24, 0x14	; 20
  ca:	81 71       	andi	r24, 0x11	; 17
  cc:	84 bb       	out	0x14, r24	; 20
	PIR_LED_DDR |= (1 << RED_PORT) | (1 << GREEN_PORT);
  ce:	84 b3       	in	r24, 0x14	; 20
  d0:	8c 60       	ori	r24, 0x0C	; 12
  d2:	84 bb       	out	0x14, r24	; 20
  d4:	08 95       	ret

000000d6 <main>:
}

int main(){
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	ec 97       	sbiw	r28, 0x3c	; 60
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	f8 94       	cli
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	cd bf       	out	0x3d, r28	; 61
	sensor_INIT();
  ea:	ee df       	rcall	.-36     	; 0xc8 <sensor_INIT>
	USART_Init();
  ec:	28 d1       	rcall	.+592    	; 0x33e <USART_Init>
	TXT_LCD_Init();
  ee:	dc d0       	rcall	.+440    	; 0x2a8 <TXT_LCD_Init>
  f0:	8e e1       	ldi	r24, 0x1E	; 30

	int n = 0;
	char num[10];
	
	char mess[5][6] = {"aaaaa", "bbbbb", "ccccc", "ddddd", "eeeee"};
  f2:	e0 e0       	ldi	r30, 0x00	; 0
  f4:	f1 e0       	ldi	r31, 0x01	; 1
  f6:	de 01       	movw	r26, r28
  f8:	1b 96       	adiw	r26, 0x0b	; 11
  fa:	01 90       	ld	r0, Z+
  fc:	0d 92       	st	X+, r0
  fe:	8a 95       	dec	r24
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x24>
 102:	1a a6       	std	Y+42, r1	; 0x2a
	char mes[20] = "";
 104:	19 a6       	std	Y+41, r1	; 0x29
 106:	fe 01       	movw	r30, r28
 108:	bb 96       	adiw	r30, 0x2b	; 43
 10a:	82 e1       	ldi	r24, 0x12	; 18
 10c:	df 01       	movw	r26, r30
 10e:	1d 92       	st	X+, r1
 110:	8a 95       	dec	r24
 112:	e9 f7       	brne	.-6      	; 0x10e <main+0x38>
 114:	78 94       	sei
	
	int intruder = 0;
	
	//SendText(DDRAM_ADDR | 0x40, "123456789");
	sei();
 116:	e1 2c       	mov	r14, r1
	char num[10];
	
	char mess[5][6] = {"aaaaa", "bbbbb", "ccccc", "ddddd", "eeeee"};
	char mes[20] = "";
	
	int intruder = 0;
 118:	f1 2c       	mov	r15, r1
 11a:	00 e0       	ldi	r16, 0x00	; 0
int main(){
	sensor_INIT();
	USART_Init();
	TXT_LCD_Init();

	int n = 0;
 11c:	10 e0       	ldi	r17, 0x00	; 0
	int intruder = 0;
	
	//SendText(DDRAM_ADDR | 0x40, "123456789");
	sei();
	while(1){
		SendCommand(CMD_CLEAR_DISPLAY);
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	b6 d0       	rcall	.+364    	; 0x28e <SendCommand>
 122:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	9f e1       	ldi	r25, 0x1F	; 31
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x50>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x56>
 12c:	00 00       	nop
 12e:	1f 93       	push	r17
		_delay_us(2000);
		sprintf(num, "%d", n);
 130:	0f 93       	push	r16
 132:	8e e1       	ldi	r24, 0x1E	; 30
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	9f 93       	push	r25
 138:	8f 93       	push	r24
 13a:	de 01       	movw	r26, r28
 13c:	11 96       	adiw	r26, 0x01	; 1
 13e:	6d 01       	movw	r12, r26
 140:	bf 93       	push	r27
 142:	af 93       	push	r26
 144:	75 d1       	rcall	.+746    	; 0x430 <sprintf>
		SendText(DDRAM_ADDR | 0x00, num);
 146:	b6 01       	movw	r22, r12
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	ec d0       	rcall	.+472    	; 0x324 <SendText>
		SendText(DDRAM_ADDR | 0x05, mess[n % 5]);
 14c:	c8 01       	movw	r24, r16
 14e:	65 e0       	ldi	r22, 0x05	; 5
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	40 d1       	rcall	.+640    	; 0x3d4 <__divmodhi4>
 154:	bc 01       	movw	r22, r24
 156:	66 0f       	add	r22, r22
 158:	77 1f       	adc	r23, r23
 15a:	68 0f       	add	r22, r24
 15c:	79 1f       	adc	r23, r25
 15e:	66 0f       	add	r22, r22
 160:	77 1f       	adc	r23, r23
 162:	8b e0       	ldi	r24, 0x0B	; 11
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	8c 0f       	add	r24, r28
 168:	9d 1f       	adc	r25, r29
 16a:	68 0f       	add	r22, r24
 16c:	79 1f       	adc	r23, r25
 16e:	85 e8       	ldi	r24, 0x85	; 133
 170:	d9 d0       	rcall	.+434    	; 0x324 <SendText>
		n++;
 172:	c8 01       	movw	r24, r16
		n %= 101;
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	65 e6       	ldi	r22, 0x65	; 101
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	2c d1       	rcall	.+600    	; 0x3d4 <__divmodhi4>
		SetText(mes);
 17c:	8c 01       	movw	r16, r24
 17e:	ce 01       	movw	r24, r28
 180:	89 96       	adiw	r24, 0x29	; 41
 182:	e9 d0       	rcall	.+466    	; 0x356 <SetText>
		if(mes != NULL){
			SendText(DDRAM_ADDR | 0x40, mes);
 184:	be 01       	movw	r22, r28
 186:	67 5d       	subi	r22, 0xD7	; 215
 188:	7f 4f       	sbci	r23, 0xFF	; 255
 18a:	80 ec       	ldi	r24, 0xC0	; 192
 18c:	cb d0       	rcall	.+406    	; 0x324 <SendText>
 18e:	0f 90       	pop	r0
		}
		if(SENSOR_PIN & (1 << PIR_PIN)){
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	98 9b       	sbis	0x13, 0	; 19
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <main+0xce>
 19e:	ee 24       	eor	r14, r14
			intruder = 1;
 1a0:	e3 94       	inc	r14
 1a2:	f1 2c       	mov	r15, r1
 1a4:	e1 14       	cp	r14, r1
		}
		if(intruder && SENSOR_PIN & (1 << SWITCH_PIN)){
 1a6:	f1 04       	cpc	r15, r1
 1a8:	21 f0       	breq	.+8      	; 0x1b2 <main+0xdc>
 1aa:	9c 9b       	sbis	0x13, 4	; 19
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <main+0xdc>
			intruder = 0;
 1ae:	e1 2c       	mov	r14, r1
 1b0:	f1 2c       	mov	r15, r1
		}
		if(intruder){
 1b2:	e1 14       	cp	r14, r1
 1b4:	f1 04       	cpc	r15, r1
			SendText(DDRAM_ADDR | 0x4F, "1");
 1b6:	29 f0       	breq	.+10     	; 0x1c2 <main+0xec>
 1b8:	61 e2       	ldi	r22, 0x21	; 33
 1ba:	71 e0       	ldi	r23, 0x01	; 1
 1bc:	8f ec       	ldi	r24, 0xCF	; 207
 1be:	b2 d0       	rcall	.+356    	; 0x324 <SendText>
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <main+0xf4>
		}
		else{
			SendText(DDRAM_ADDR | 0x4F, "0");
 1c2:	63 e2       	ldi	r22, 0x23	; 35
 1c4:	71 e0       	ldi	r23, 0x01	; 1
 1c6:	8f ec       	ldi	r24, 0xCF	; 207
 1c8:	ad d0       	rcall	.+346    	; 0x324 <SendText>
 1ca:	9f ef       	ldi	r25, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	a3 ed       	ldi	r26, 0xD3	; 211
 1ce:	b0 e3       	ldi	r27, 0x30	; 48
 1d0:	91 50       	subi	r25, 0x01	; 1
 1d2:	a0 40       	sbci	r26, 0x00	; 0
 1d4:	b0 40       	sbci	r27, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0xfa>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x104>
 1da:	00 00       	nop
 1dc:	a0 cf       	rjmp	.-192    	; 0x11e <main+0x48>

000001de <TXT_LCD_Enable>:


//- LCD 모듈 활성/비활성 구현 ------------------------------------------------------------------------
void TXT_LCD_Enable(void)
{
	TLCD_PORT &=  ~(1<<EN_BIT);   //- LOW - Disable
 1de:	8b b3       	in	r24, 0x1b	; 27
 1e0:	8b 7f       	andi	r24, 0xFB	; 251
 1e2:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e4:	85 e0       	ldi	r24, 0x05	; 5
 1e6:	8a 95       	dec	r24
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <TXT_LCD_Enable+0x8>
 1ea:	00 00       	nop
	_delay_us(1);
	
	TLCD_PORT |=  (1<<EN_BIT);	 //- HIGH - Enable
 1ec:	8b b3       	in	r24, 0x1b	; 27
 1ee:	84 60       	ori	r24, 0x04	; 4
 1f0:	8b bb       	out	0x1b, r24	; 27
 1f2:	95 e0       	ldi	r25, 0x05	; 5
 1f4:	9a 95       	dec	r25
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <TXT_LCD_Enable+0x16>
 1f8:	00 00       	nop
	_delay_us(1);

	TLCD_PORT &=  ~(1<<EN_BIT);   //- LOW - Disable
 1fa:	8b b3       	in	r24, 0x1b	; 27
 1fc:	8b 7f       	andi	r24, 0xFB	; 251
 1fe:	8b bb       	out	0x1b, r24	; 27
 200:	8f e8       	ldi	r24, 0x8F	; 143
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <TXT_LCD_Enable+0x26>
 208:	00 c0       	rjmp	.+0      	; 0x20a <TXT_LCD_Enable+0x2c>
 20a:	00 00       	nop
 20c:	08 95       	ret

0000020e <TXT_LCD_Write>:

//- LCD 명령어/데이터 레지스터 기록 구현 ---------------------------------------------------------------
void TXT_LCD_Write(unsigned char nValue)
{
	int nTmp  =  0;
	TLCD_PORT &= ~((1<<DATA_D4)|(1<<DATA_D5)|(1<<DATA_D6)|(1<<DATA_D7));
 20e:	9b b3       	in	r25, 0x1b	; 27
 210:	9f 70       	andi	r25, 0x0F	; 15
 212:	9b bb       	out	0x1b, r25	; 27

	for (int nIdx = 0; nIdx < 4; nIdx++)
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	17 c0       	rjmp	.+46     	; 0x248 <TXT_LCD_Write+0x3a>
	{
		nTmp = (nValue>>nIdx) & 0x01;
 21a:	28 2f       	mov	r18, r24
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	04 2e       	mov	r0, r20
 220:	02 c0       	rjmp	.+4      	; 0x226 <TXT_LCD_Write+0x18>
 222:	35 95       	asr	r19
 224:	27 95       	ror	r18
 226:	0a 94       	dec	r0
 228:	e2 f7       	brpl	.-8      	; 0x222 <TXT_LCD_Write+0x14>
 22a:	21 70       	andi	r18, 0x01	; 1
 22c:	33 27       	eor	r19, r19
		TLCD_PORT |=  ( nTmp << (DATA_D4+nIdx) );
 22e:	9b b3       	in	r25, 0x1b	; 27
 230:	ba 01       	movw	r22, r20
 232:	6c 5f       	subi	r22, 0xFC	; 252
 234:	7f 4f       	sbci	r23, 0xFF	; 255
 236:	02 c0       	rjmp	.+4      	; 0x23c <TXT_LCD_Write+0x2e>
 238:	22 0f       	add	r18, r18
 23a:	33 1f       	adc	r19, r19
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <TXT_LCD_Write+0x2a>
 240:	29 2b       	or	r18, r25
 242:	2b bb       	out	0x1b, r18	; 27
void TXT_LCD_Write(unsigned char nValue)
{
	int nTmp  =  0;
	TLCD_PORT &= ~((1<<DATA_D4)|(1<<DATA_D5)|(1<<DATA_D6)|(1<<DATA_D7));

	for (int nIdx = 0; nIdx < 4; nIdx++)
 244:	4f 5f       	subi	r20, 0xFF	; 255
 246:	5f 4f       	sbci	r21, 0xFF	; 255
 248:	44 30       	cpi	r20, 0x04	; 4
 24a:	51 05       	cpc	r21, r1
 24c:	34 f3       	brlt	.-52     	; 0x21a <TXT_LCD_Write+0xc>
	{
		nTmp = (nValue>>nIdx) & 0x01;
		TLCD_PORT |=  ( nTmp << (DATA_D4+nIdx) );
	}
	TXT_LCD_Enable();
 24e:	c7 cf       	rjmp	.-114    	; 0x1de <TXT_LCD_Enable>
 250:	08 95       	ret

00000252 <Set4BitMode>:

//- TXT_LCD 4bit 인터페이스 설정 구현 ---------------------------------------------
void Set4BitMode(void)
{
	//- Command 전송을 위한 RS=0, RW=0, EN=0
	TLCD_PORT &= ~((1<<RS_BIT)|(1<<RW_BIT)|(1<<EN_BIT));
 252:	8b b3       	in	r24, 0x1b	; 27
 254:	88 7f       	andi	r24, 0xF8	; 248
 256:	8b bb       	out	0x1b, r24	; 27

	TXT_LCD_Write(CMD_8BIT_MODE);
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	d9 df       	rcall	.-78     	; 0x20e <TXT_LCD_Write>
 25c:	8f e4       	ldi	r24, 0x4F	; 79
 25e:	96 e4       	ldi	r25, 0x46	; 70
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <Set4BitMode+0xe>
 264:	00 c0       	rjmp	.+0      	; 0x266 <Set4BitMode+0x14>
 266:	00 00       	nop
	_delay_us(4500);

	TXT_LCD_Write(CMD_8BIT_MODE);
 268:	83 e0       	ldi	r24, 0x03	; 3
 26a:	d1 df       	rcall	.-94     	; 0x20e <TXT_LCD_Write>
 26c:	8f e4       	ldi	r24, 0x4F	; 79
 26e:	96 e4       	ldi	r25, 0x46	; 70
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <Set4BitMode+0x1e>
 274:	00 c0       	rjmp	.+0      	; 0x276 <Set4BitMode+0x24>
	_delay_us(4500);
	
	TXT_LCD_Write(CMD_8BIT_MODE);
 276:	00 00       	nop
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	c9 df       	rcall	.-110    	; 0x20e <TXT_LCD_Write>
 27c:	87 e5       	ldi	r24, 0x57	; 87
 27e:	92 e0       	ldi	r25, 0x02	; 2
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <Set4BitMode+0x2e>
 284:	00 c0       	rjmp	.+0      	; 0x286 <Set4BitMode+0x34>
	_delay_us(150);
	
	TXT_LCD_Write(CMD_4BIT_MODE);
 286:	00 00       	nop
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	c1 cf       	rjmp	.-126    	; 0x20e <TXT_LCD_Write>
 28c:	08 95       	ret

0000028e <SendCommand>:
}


//- RBG_LCD 명령어 전달 함수 구현 ------------------------------------------------------------------------
void SendCommand(unsigned char command)
{
 28e:	cf 93       	push	r28
 290:	c8 2f       	mov	r28, r24
	//- Command 전송을 위한  RS=0, RW=0, EN=0
	TLCD_PORT  &= ~( (1<<RS_BIT)|(1<<RW_BIT)|(1<<EN_BIT));
 292:	8b b3       	in	r24, 0x1b	; 27
 294:	88 7f       	andi	r24, 0xF8	; 248
 296:	8b bb       	out	0x1b, r24	; 27

	//- Data Bus에 CMD 쓰기
	TXT_LCD_Write(command>>4);
 298:	8c 2f       	mov	r24, r28
 29a:	82 95       	swap	r24
 29c:	8f 70       	andi	r24, 0x0F	; 15
 29e:	b7 df       	rcall	.-146    	; 0x20e <TXT_LCD_Write>
	TXT_LCD_Write(command);
 2a0:	8c 2f       	mov	r24, r28
 2a2:	b5 df       	rcall	.-150    	; 0x20e <TXT_LCD_Write>
}
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <TXT_LCD_Init>:
//- TXT LCD 초기화 함수 구현 -----------------------------------------------------
void TXT_LCD_Init(void)
{
	//------ (1) TXT_LCD_Init 제어 Port 설정 및 초기화
	//- TXT_LCD 제어 Pin Output 설정 및 초기화
	TLCD_DDR  = ALL_SET;
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	8a bb       	out	0x1a, r24	; 26
	TLCD_PORT = ALL_CLEAR;
 2ac:	1b ba       	out	0x1b, r1	; 27
 2ae:	2f ef       	ldi	r18, 0xFF	; 255
 2b0:	80 e7       	ldi	r24, 0x70	; 112
 2b2:	92 e0       	ldi	r25, 0x02	; 2
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	80 40       	sbci	r24, 0x00	; 0
 2b8:	90 40       	sbci	r25, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <TXT_LCD_Init+0xc>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <TXT_LCD_Init+0x16>
 2be:	00 00       	nop
	
	_delay_us(50000);

	//------ (2) TXT LCD 인터페이스 설정
	Set4BitMode();
 2c0:	c8 df       	rcall	.-112    	; 0x252 <Set4BitMode>
	
	//------ (3) TXT LCD 출력을 위한 설정
	//- LCD의 행, 열 , 글자 크기 설정
	SendCommand(CMD_FUNCTION_SET);
 2c2:	88 e2       	ldi	r24, 0x28	; 40
 2c4:	e4 df       	rcall	.-56     	; 0x28e <SendCommand>
 2c6:	8f e3       	ldi	r24, 0x3F	; 63
 2c8:	9f e1       	ldi	r25, 0x1F	; 31
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <TXT_LCD_Init+0x22>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <TXT_LCD_Init+0x28>
	_delay_us(2000);
	
	//- 디스플레이, 커서, 문자 깜빡임 On/Off 설정
	SendCommand(CMD_DISPLAY_CONTROL);
 2d0:	00 00       	nop
 2d2:	8c e0       	ldi	r24, 0x0C	; 12
 2d4:	dc df       	rcall	.-72     	; 0x28e <SendCommand>
 2d6:	8f e3       	ldi	r24, 0x3F	; 63
 2d8:	9f e1       	ldi	r25, 0x1F	; 31
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <TXT_LCD_Init+0x32>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <TXT_LCD_Init+0x38>
	_delay_us(2000);
	
	//- 커서 이동 방향, 문자 디스플레이 이동 여부 설정
	SendCommand(CMD_ENTRYMODE_SET);
 2e0:	00 00       	nop
 2e2:	86 e0       	ldi	r24, 0x06	; 6
 2e4:	d4 df       	rcall	.-88     	; 0x28e <SendCommand>
 2e6:	8f e3       	ldi	r24, 0x3F	; 63
 2e8:	9f e1       	ldi	r25, 0x1F	; 31
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <TXT_LCD_Init+0x42>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <TXT_LCD_Init+0x48>
	_delay_us(2000);
	
	//- LCD 화면 지우고 커서는 1행 1열 위치, DDRAM AC=0
	SendCommand(CMD_CLEAR_DISPLAY);
 2f0:	00 00       	nop
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	cc df       	rcall	.-104    	; 0x28e <SendCommand>
 2f6:	8f e3       	ldi	r24, 0x3F	; 63
 2f8:	9f e1       	ldi	r25, 0x1F	; 31
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <TXT_LCD_Init+0x52>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <TXT_LCD_Init+0x58>
 300:	00 00       	nop
 302:	08 95       	ret

00000304 <SendData>:
}


//- RBG_LCD 데이터 전달 함수 구현 ------------------------------------------------------------------------
void SendData(unsigned char data)
{
 304:	cf 93       	push	r28
 306:	c8 2f       	mov	r28, r24
	//- Data 전송을 위한  RS=1, RW=0, EN=0
	TLCD_PORT  |=   (1<<RS_BIT);
 308:	8b b3       	in	r24, 0x1b	; 27
 30a:	81 60       	ori	r24, 0x01	; 1
 30c:	8b bb       	out	0x1b, r24	; 27
	TLCD_PORT  &= ~((1<<RW_BIT) | (1<<EN_BIT));
 30e:	8b b3       	in	r24, 0x1b	; 27
 310:	89 7f       	andi	r24, 0xF9	; 249
 312:	8b bb       	out	0x1b, r24	; 27

	TXT_LCD_Write(data>>4);
 314:	8c 2f       	mov	r24, r28
 316:	82 95       	swap	r24
 318:	8f 70       	andi	r24, 0x0F	; 15
 31a:	79 df       	rcall	.-270    	; 0x20e <TXT_LCD_Write>
	TXT_LCD_Write(data);
 31c:	8c 2f       	mov	r24, r28
 31e:	77 df       	rcall	.-274    	; 0x20e <TXT_LCD_Write>
}
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <SendText>:
}


//- LCD 문자열 출력 함수 구현 ------------------------------------------------------------------------
void SendText(unsigned char addrCommand, char *szText)
{
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	eb 01       	movw	r28, r22
	SendCommand(addrCommand);   //- DD Ram 주소 전달
 32a:	b1 df       	rcall	.-158    	; 0x28e <SendCommand>

	//- Data 전달
	while(*szText != '\0')
	{
		SendData(*szText);
 32c:	02 c0       	rjmp	.+4      	; 0x332 <SendText+0xe>
 32e:	ea df       	rcall	.-44     	; 0x304 <SendData>
		szText++;
 330:	21 96       	adiw	r28, 0x01	; 1
void SendText(unsigned char addrCommand, char *szText)
{
	SendCommand(addrCommand);   //- DD Ram 주소 전달

	//- Data 전달
	while(*szText != '\0')
 332:	88 81       	ld	r24, Y
 334:	81 11       	cpse	r24, r1
 336:	fb cf       	rjmp	.-10     	; 0x32e <SendText+0xa>
	{
		SendData(*szText);
		szText++;
	}
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <USART_Init>:
	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);
}

void USART_Transmitter(unsigned char txData){
	while(!(UCSR1A & (1 << UDRE1))); //버퍼가 빌 때 까지 대기
	UDR1 = txData;
 33e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 342:	83 e3       	ldi	r24, 0x33	; 51
 344:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 348:	88 e9       	ldi	r24, 0x98	; 152
 34a:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 34e:	86 e0       	ldi	r24, 0x06	; 6
 350:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
 354:	08 95       	ret

00000356 <SetText>:
}

void SetText(char *temp){
	text[idx] = NULL;
 356:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <__data_end>
 35a:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <__data_end+0x1>
 35e:	e8 5d       	subi	r30, 0xD8	; 216
 360:	fe 4f       	sbci	r31, 0xFE	; 254
 362:	10 82       	st	Z, r1
	idx = 0;
 364:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <__data_end+0x1>
 368:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
	strcpy(temp, text);
 36c:	68 e2       	ldi	r22, 0x28	; 40
 36e:	71 e0       	ldi	r23, 0x01	; 1
 370:	58 c0       	rjmp	.+176    	; 0x422 <strcpy>
 372:	08 95       	ret

00000374 <__vector_30>:
}

ISR(USART1_RX_vect){
 374:	1f 92       	push	r1
 376:	0f 92       	push	r0
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	0f 92       	push	r0
 37c:	11 24       	eor	r1, r1
 37e:	0b b6       	in	r0, 0x3b	; 59
 380:	0f 92       	push	r0
 382:	8f 93       	push	r24
 384:	9f 93       	push	r25
 386:	ef 93       	push	r30
 388:	ff 93       	push	r31
	//수신 버퍼에서 읽어 온 데이터를 다시 송신
	if(UCSR1A & (1 << RXC1)){
 38a:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 38e:	88 23       	and	r24, r24
 390:	b4 f4       	brge	.+44     	; 0x3be <__vector_30+0x4a>
		
		//for(int i = 0; 1; i++){
			rxData = UDR1;
 392:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 396:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <rxData>
			text[idx] = rxData;
 39a:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <__data_end>
 39e:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <__data_end+0x1>
 3a2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <rxData>
 3a6:	e8 5d       	subi	r30, 0xD8	; 216
 3a8:	fe 4f       	sbci	r31, 0xFE	; 254
 3aa:	80 83       	st	Z, r24
			idx++;
 3ac:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 3b0:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
 3ba:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
		//		text[i] = '\0';
		//		return;
		//	}
		//}
	}
 3be:	ff 91       	pop	r31
 3c0:	ef 91       	pop	r30
 3c2:	9f 91       	pop	r25
 3c4:	8f 91       	pop	r24
 3c6:	0f 90       	pop	r0
 3c8:	0b be       	out	0x3b, r0	; 59
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <__divmodhi4>:
 3d4:	97 fb       	bst	r25, 7
 3d6:	07 2e       	mov	r0, r23
 3d8:	16 f4       	brtc	.+4      	; 0x3de <__divmodhi4+0xa>
 3da:	00 94       	com	r0
 3dc:	06 d0       	rcall	.+12     	; 0x3ea <__divmodhi4_neg1>
 3de:	77 fd       	sbrc	r23, 7
 3e0:	08 d0       	rcall	.+16     	; 0x3f2 <__divmodhi4_neg2>
 3e2:	0b d0       	rcall	.+22     	; 0x3fa <__udivmodhi4>
 3e4:	07 fc       	sbrc	r0, 7
 3e6:	05 d0       	rcall	.+10     	; 0x3f2 <__divmodhi4_neg2>
 3e8:	3e f4       	brtc	.+14     	; 0x3f8 <__divmodhi4_exit>

000003ea <__divmodhi4_neg1>:
 3ea:	90 95       	com	r25
 3ec:	81 95       	neg	r24
 3ee:	9f 4f       	sbci	r25, 0xFF	; 255
 3f0:	08 95       	ret

000003f2 <__divmodhi4_neg2>:
 3f2:	70 95       	com	r23
 3f4:	61 95       	neg	r22
 3f6:	7f 4f       	sbci	r23, 0xFF	; 255

000003f8 <__divmodhi4_exit>:
 3f8:	08 95       	ret

000003fa <__udivmodhi4>:
 3fa:	aa 1b       	sub	r26, r26
 3fc:	bb 1b       	sub	r27, r27
 3fe:	51 e1       	ldi	r21, 0x11	; 17
 400:	07 c0       	rjmp	.+14     	; 0x410 <__udivmodhi4_ep>

00000402 <__udivmodhi4_loop>:
 402:	aa 1f       	adc	r26, r26
 404:	bb 1f       	adc	r27, r27
 406:	a6 17       	cp	r26, r22
 408:	b7 07       	cpc	r27, r23
 40a:	10 f0       	brcs	.+4      	; 0x410 <__udivmodhi4_ep>
 40c:	a6 1b       	sub	r26, r22
 40e:	b7 0b       	sbc	r27, r23

00000410 <__udivmodhi4_ep>:
 410:	88 1f       	adc	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	5a 95       	dec	r21
 416:	a9 f7       	brne	.-22     	; 0x402 <__udivmodhi4_loop>
 418:	80 95       	com	r24
 41a:	90 95       	com	r25
 41c:	bc 01       	movw	r22, r24
 41e:	cd 01       	movw	r24, r26
 420:	08 95       	ret

00000422 <strcpy>:
 422:	fb 01       	movw	r30, r22
 424:	dc 01       	movw	r26, r24
 426:	01 90       	ld	r0, Z+
 428:	0d 92       	st	X+, r0
 42a:	00 20       	and	r0, r0
 42c:	e1 f7       	brne	.-8      	; 0x426 <strcpy+0x4>
 42e:	08 95       	ret

00000430 <sprintf>:
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
 43c:	2e 97       	sbiw	r28, 0x0e	; 14
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	f8 94       	cli
 442:	de bf       	out	0x3e, r29	; 62
 444:	0f be       	out	0x3f, r0	; 63
 446:	cd bf       	out	0x3d, r28	; 61
 448:	0d 89       	ldd	r16, Y+21	; 0x15
 44a:	1e 89       	ldd	r17, Y+22	; 0x16
 44c:	86 e0       	ldi	r24, 0x06	; 6
 44e:	8c 83       	std	Y+4, r24	; 0x04
 450:	1a 83       	std	Y+2, r17	; 0x02
 452:	09 83       	std	Y+1, r16	; 0x01
 454:	8f ef       	ldi	r24, 0xFF	; 255
 456:	9f e7       	ldi	r25, 0x7F	; 127
 458:	9e 83       	std	Y+6, r25	; 0x06
 45a:	8d 83       	std	Y+5, r24	; 0x05
 45c:	ae 01       	movw	r20, r28
 45e:	47 5e       	subi	r20, 0xE7	; 231
 460:	5f 4f       	sbci	r21, 0xFF	; 255
 462:	6f 89       	ldd	r22, Y+23	; 0x17
 464:	78 8d       	ldd	r23, Y+24	; 0x18
 466:	ce 01       	movw	r24, r28
 468:	01 96       	adiw	r24, 0x01	; 1
 46a:	10 d0       	rcall	.+32     	; 0x48c <vfprintf>
 46c:	ef 81       	ldd	r30, Y+7	; 0x07
 46e:	f8 85       	ldd	r31, Y+8	; 0x08
 470:	e0 0f       	add	r30, r16
 472:	f1 1f       	adc	r31, r17
 474:	10 82       	st	Z, r1
 476:	2e 96       	adiw	r28, 0x0e	; 14
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	1f 91       	pop	r17
 488:	0f 91       	pop	r16
 48a:	08 95       	ret

0000048c <vfprintf>:
 48c:	2f 92       	push	r2
 48e:	3f 92       	push	r3
 490:	4f 92       	push	r4
 492:	5f 92       	push	r5
 494:	6f 92       	push	r6
 496:	7f 92       	push	r7
 498:	8f 92       	push	r8
 49a:	9f 92       	push	r9
 49c:	af 92       	push	r10
 49e:	bf 92       	push	r11
 4a0:	cf 92       	push	r12
 4a2:	df 92       	push	r13
 4a4:	ef 92       	push	r14
 4a6:	ff 92       	push	r15
 4a8:	0f 93       	push	r16
 4aa:	1f 93       	push	r17
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	cd b7       	in	r28, 0x3d	; 61
 4b2:	de b7       	in	r29, 0x3e	; 62
 4b4:	2b 97       	sbiw	r28, 0x0b	; 11
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	f8 94       	cli
 4ba:	de bf       	out	0x3e, r29	; 62
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	cd bf       	out	0x3d, r28	; 61
 4c0:	6c 01       	movw	r12, r24
 4c2:	7b 01       	movw	r14, r22
 4c4:	8a 01       	movw	r16, r20
 4c6:	fc 01       	movw	r30, r24
 4c8:	17 82       	std	Z+7, r1	; 0x07
 4ca:	16 82       	std	Z+6, r1	; 0x06
 4cc:	83 81       	ldd	r24, Z+3	; 0x03
 4ce:	81 ff       	sbrs	r24, 1
 4d0:	bf c1       	rjmp	.+894    	; 0x850 <vfprintf+0x3c4>
 4d2:	ce 01       	movw	r24, r28
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	3c 01       	movw	r6, r24
 4d8:	f6 01       	movw	r30, r12
 4da:	93 81       	ldd	r25, Z+3	; 0x03
 4dc:	f7 01       	movw	r30, r14
 4de:	93 fd       	sbrc	r25, 3
 4e0:	85 91       	lpm	r24, Z+
 4e2:	93 ff       	sbrs	r25, 3
 4e4:	81 91       	ld	r24, Z+
 4e6:	7f 01       	movw	r14, r30
 4e8:	88 23       	and	r24, r24
 4ea:	09 f4       	brne	.+2      	; 0x4ee <vfprintf+0x62>
 4ec:	ad c1       	rjmp	.+858    	; 0x848 <vfprintf+0x3bc>
 4ee:	85 32       	cpi	r24, 0x25	; 37
 4f0:	39 f4       	brne	.+14     	; 0x500 <vfprintf+0x74>
 4f2:	93 fd       	sbrc	r25, 3
 4f4:	85 91       	lpm	r24, Z+
 4f6:	93 ff       	sbrs	r25, 3
 4f8:	81 91       	ld	r24, Z+
 4fa:	7f 01       	movw	r14, r30
 4fc:	85 32       	cpi	r24, 0x25	; 37
 4fe:	21 f4       	brne	.+8      	; 0x508 <vfprintf+0x7c>
 500:	b6 01       	movw	r22, r12
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	d6 d1       	rcall	.+940    	; 0x8b2 <fputc>
 506:	e8 cf       	rjmp	.-48     	; 0x4d8 <vfprintf+0x4c>
 508:	91 2c       	mov	r9, r1
 50a:	21 2c       	mov	r2, r1
 50c:	31 2c       	mov	r3, r1
 50e:	ff e1       	ldi	r31, 0x1F	; 31
 510:	f3 15       	cp	r31, r3
 512:	d8 f0       	brcs	.+54     	; 0x54a <vfprintf+0xbe>
 514:	8b 32       	cpi	r24, 0x2B	; 43
 516:	79 f0       	breq	.+30     	; 0x536 <vfprintf+0xaa>
 518:	38 f4       	brcc	.+14     	; 0x528 <vfprintf+0x9c>
 51a:	80 32       	cpi	r24, 0x20	; 32
 51c:	79 f0       	breq	.+30     	; 0x53c <vfprintf+0xb0>
 51e:	83 32       	cpi	r24, 0x23	; 35
 520:	a1 f4       	brne	.+40     	; 0x54a <vfprintf+0xbe>
 522:	23 2d       	mov	r18, r3
 524:	20 61       	ori	r18, 0x10	; 16
 526:	1d c0       	rjmp	.+58     	; 0x562 <vfprintf+0xd6>
 528:	8d 32       	cpi	r24, 0x2D	; 45
 52a:	61 f0       	breq	.+24     	; 0x544 <vfprintf+0xb8>
 52c:	80 33       	cpi	r24, 0x30	; 48
 52e:	69 f4       	brne	.+26     	; 0x54a <vfprintf+0xbe>
 530:	23 2d       	mov	r18, r3
 532:	21 60       	ori	r18, 0x01	; 1
 534:	16 c0       	rjmp	.+44     	; 0x562 <vfprintf+0xd6>
 536:	83 2d       	mov	r24, r3
 538:	82 60       	ori	r24, 0x02	; 2
 53a:	38 2e       	mov	r3, r24
 53c:	e3 2d       	mov	r30, r3
 53e:	e4 60       	ori	r30, 0x04	; 4
 540:	3e 2e       	mov	r3, r30
 542:	2a c0       	rjmp	.+84     	; 0x598 <vfprintf+0x10c>
 544:	f3 2d       	mov	r31, r3
 546:	f8 60       	ori	r31, 0x08	; 8
 548:	1d c0       	rjmp	.+58     	; 0x584 <vfprintf+0xf8>
 54a:	37 fc       	sbrc	r3, 7
 54c:	2d c0       	rjmp	.+90     	; 0x5a8 <vfprintf+0x11c>
 54e:	20 ed       	ldi	r18, 0xD0	; 208
 550:	28 0f       	add	r18, r24
 552:	2a 30       	cpi	r18, 0x0A	; 10
 554:	40 f0       	brcs	.+16     	; 0x566 <vfprintf+0xda>
 556:	8e 32       	cpi	r24, 0x2E	; 46
 558:	b9 f4       	brne	.+46     	; 0x588 <vfprintf+0xfc>
 55a:	36 fc       	sbrc	r3, 6
 55c:	75 c1       	rjmp	.+746    	; 0x848 <vfprintf+0x3bc>
 55e:	23 2d       	mov	r18, r3
 560:	20 64       	ori	r18, 0x40	; 64
 562:	32 2e       	mov	r3, r18
 564:	19 c0       	rjmp	.+50     	; 0x598 <vfprintf+0x10c>
 566:	36 fe       	sbrs	r3, 6
 568:	06 c0       	rjmp	.+12     	; 0x576 <vfprintf+0xea>
 56a:	8a e0       	ldi	r24, 0x0A	; 10
 56c:	98 9e       	mul	r9, r24
 56e:	20 0d       	add	r18, r0
 570:	11 24       	eor	r1, r1
 572:	92 2e       	mov	r9, r18
 574:	11 c0       	rjmp	.+34     	; 0x598 <vfprintf+0x10c>
 576:	ea e0       	ldi	r30, 0x0A	; 10
 578:	2e 9e       	mul	r2, r30
 57a:	20 0d       	add	r18, r0
 57c:	11 24       	eor	r1, r1
 57e:	22 2e       	mov	r2, r18
 580:	f3 2d       	mov	r31, r3
 582:	f0 62       	ori	r31, 0x20	; 32
 584:	3f 2e       	mov	r3, r31
 586:	08 c0       	rjmp	.+16     	; 0x598 <vfprintf+0x10c>
 588:	8c 36       	cpi	r24, 0x6C	; 108
 58a:	21 f4       	brne	.+8      	; 0x594 <vfprintf+0x108>
 58c:	83 2d       	mov	r24, r3
 58e:	80 68       	ori	r24, 0x80	; 128
 590:	38 2e       	mov	r3, r24
 592:	02 c0       	rjmp	.+4      	; 0x598 <vfprintf+0x10c>
 594:	88 36       	cpi	r24, 0x68	; 104
 596:	41 f4       	brne	.+16     	; 0x5a8 <vfprintf+0x11c>
 598:	f7 01       	movw	r30, r14
 59a:	93 fd       	sbrc	r25, 3
 59c:	85 91       	lpm	r24, Z+
 59e:	93 ff       	sbrs	r25, 3
 5a0:	81 91       	ld	r24, Z+
 5a2:	7f 01       	movw	r14, r30
 5a4:	81 11       	cpse	r24, r1
 5a6:	b3 cf       	rjmp	.-154    	; 0x50e <vfprintf+0x82>
 5a8:	98 2f       	mov	r25, r24
 5aa:	9f 7d       	andi	r25, 0xDF	; 223
 5ac:	95 54       	subi	r25, 0x45	; 69
 5ae:	93 30       	cpi	r25, 0x03	; 3
 5b0:	28 f4       	brcc	.+10     	; 0x5bc <vfprintf+0x130>
 5b2:	0c 5f       	subi	r16, 0xFC	; 252
 5b4:	1f 4f       	sbci	r17, 0xFF	; 255
 5b6:	9f e3       	ldi	r25, 0x3F	; 63
 5b8:	99 83       	std	Y+1, r25	; 0x01
 5ba:	0d c0       	rjmp	.+26     	; 0x5d6 <vfprintf+0x14a>
 5bc:	83 36       	cpi	r24, 0x63	; 99
 5be:	31 f0       	breq	.+12     	; 0x5cc <vfprintf+0x140>
 5c0:	83 37       	cpi	r24, 0x73	; 115
 5c2:	71 f0       	breq	.+28     	; 0x5e0 <vfprintf+0x154>
 5c4:	83 35       	cpi	r24, 0x53	; 83
 5c6:	09 f0       	breq	.+2      	; 0x5ca <vfprintf+0x13e>
 5c8:	55 c0       	rjmp	.+170    	; 0x674 <vfprintf+0x1e8>
 5ca:	20 c0       	rjmp	.+64     	; 0x60c <vfprintf+0x180>
 5cc:	f8 01       	movw	r30, r16
 5ce:	80 81       	ld	r24, Z
 5d0:	89 83       	std	Y+1, r24	; 0x01
 5d2:	0e 5f       	subi	r16, 0xFE	; 254
 5d4:	1f 4f       	sbci	r17, 0xFF	; 255
 5d6:	88 24       	eor	r8, r8
 5d8:	83 94       	inc	r8
 5da:	91 2c       	mov	r9, r1
 5dc:	53 01       	movw	r10, r6
 5de:	12 c0       	rjmp	.+36     	; 0x604 <vfprintf+0x178>
 5e0:	28 01       	movw	r4, r16
 5e2:	f2 e0       	ldi	r31, 0x02	; 2
 5e4:	4f 0e       	add	r4, r31
 5e6:	51 1c       	adc	r5, r1
 5e8:	f8 01       	movw	r30, r16
 5ea:	a0 80       	ld	r10, Z
 5ec:	b1 80       	ldd	r11, Z+1	; 0x01
 5ee:	36 fe       	sbrs	r3, 6
 5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <vfprintf+0x16c>
 5f2:	69 2d       	mov	r22, r9
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <vfprintf+0x170>
 5f8:	6f ef       	ldi	r22, 0xFF	; 255
 5fa:	7f ef       	ldi	r23, 0xFF	; 255
 5fc:	c5 01       	movw	r24, r10
 5fe:	4e d1       	rcall	.+668    	; 0x89c <strnlen>
 600:	4c 01       	movw	r8, r24
 602:	82 01       	movw	r16, r4
 604:	f3 2d       	mov	r31, r3
 606:	ff 77       	andi	r31, 0x7F	; 127
 608:	3f 2e       	mov	r3, r31
 60a:	15 c0       	rjmp	.+42     	; 0x636 <vfprintf+0x1aa>
 60c:	28 01       	movw	r4, r16
 60e:	22 e0       	ldi	r18, 0x02	; 2
 610:	42 0e       	add	r4, r18
 612:	51 1c       	adc	r5, r1
 614:	f8 01       	movw	r30, r16
 616:	a0 80       	ld	r10, Z
 618:	b1 80       	ldd	r11, Z+1	; 0x01
 61a:	36 fe       	sbrs	r3, 6
 61c:	03 c0       	rjmp	.+6      	; 0x624 <vfprintf+0x198>
 61e:	69 2d       	mov	r22, r9
 620:	70 e0       	ldi	r23, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <vfprintf+0x19c>
 624:	6f ef       	ldi	r22, 0xFF	; 255
 626:	7f ef       	ldi	r23, 0xFF	; 255
 628:	c5 01       	movw	r24, r10
 62a:	2d d1       	rcall	.+602    	; 0x886 <strnlen_P>
 62c:	4c 01       	movw	r8, r24
 62e:	f3 2d       	mov	r31, r3
 630:	f0 68       	ori	r31, 0x80	; 128
 632:	3f 2e       	mov	r3, r31
 634:	82 01       	movw	r16, r4
 636:	33 fc       	sbrc	r3, 3
 638:	19 c0       	rjmp	.+50     	; 0x66c <vfprintf+0x1e0>
 63a:	82 2d       	mov	r24, r2
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	88 16       	cp	r8, r24
 640:	99 06       	cpc	r9, r25
 642:	a0 f4       	brcc	.+40     	; 0x66c <vfprintf+0x1e0>
 644:	b6 01       	movw	r22, r12
 646:	80 e2       	ldi	r24, 0x20	; 32
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	33 d1       	rcall	.+614    	; 0x8b2 <fputc>
 64c:	2a 94       	dec	r2
 64e:	f5 cf       	rjmp	.-22     	; 0x63a <vfprintf+0x1ae>
 650:	f5 01       	movw	r30, r10
 652:	37 fc       	sbrc	r3, 7
 654:	85 91       	lpm	r24, Z+
 656:	37 fe       	sbrs	r3, 7
 658:	81 91       	ld	r24, Z+
 65a:	5f 01       	movw	r10, r30
 65c:	b6 01       	movw	r22, r12
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	28 d1       	rcall	.+592    	; 0x8b2 <fputc>
 662:	21 10       	cpse	r2, r1
 664:	2a 94       	dec	r2
 666:	21 e0       	ldi	r18, 0x01	; 1
 668:	82 1a       	sub	r8, r18
 66a:	91 08       	sbc	r9, r1
 66c:	81 14       	cp	r8, r1
 66e:	91 04       	cpc	r9, r1
 670:	79 f7       	brne	.-34     	; 0x650 <vfprintf+0x1c4>
 672:	e1 c0       	rjmp	.+450    	; 0x836 <vfprintf+0x3aa>
 674:	84 36       	cpi	r24, 0x64	; 100
 676:	11 f0       	breq	.+4      	; 0x67c <vfprintf+0x1f0>
 678:	89 36       	cpi	r24, 0x69	; 105
 67a:	39 f5       	brne	.+78     	; 0x6ca <vfprintf+0x23e>
 67c:	f8 01       	movw	r30, r16
 67e:	37 fe       	sbrs	r3, 7
 680:	07 c0       	rjmp	.+14     	; 0x690 <vfprintf+0x204>
 682:	60 81       	ld	r22, Z
 684:	71 81       	ldd	r23, Z+1	; 0x01
 686:	82 81       	ldd	r24, Z+2	; 0x02
 688:	93 81       	ldd	r25, Z+3	; 0x03
 68a:	0c 5f       	subi	r16, 0xFC	; 252
 68c:	1f 4f       	sbci	r17, 0xFF	; 255
 68e:	08 c0       	rjmp	.+16     	; 0x6a0 <vfprintf+0x214>
 690:	60 81       	ld	r22, Z
 692:	71 81       	ldd	r23, Z+1	; 0x01
 694:	07 2e       	mov	r0, r23
 696:	00 0c       	add	r0, r0
 698:	88 0b       	sbc	r24, r24
 69a:	99 0b       	sbc	r25, r25
 69c:	0e 5f       	subi	r16, 0xFE	; 254
 69e:	1f 4f       	sbci	r17, 0xFF	; 255
 6a0:	f3 2d       	mov	r31, r3
 6a2:	ff 76       	andi	r31, 0x6F	; 111
 6a4:	3f 2e       	mov	r3, r31
 6a6:	97 ff       	sbrs	r25, 7
 6a8:	09 c0       	rjmp	.+18     	; 0x6bc <vfprintf+0x230>
 6aa:	90 95       	com	r25
 6ac:	80 95       	com	r24
 6ae:	70 95       	com	r23
 6b0:	61 95       	neg	r22
 6b2:	7f 4f       	sbci	r23, 0xFF	; 255
 6b4:	8f 4f       	sbci	r24, 0xFF	; 255
 6b6:	9f 4f       	sbci	r25, 0xFF	; 255
 6b8:	f0 68       	ori	r31, 0x80	; 128
 6ba:	3f 2e       	mov	r3, r31
 6bc:	2a e0       	ldi	r18, 0x0A	; 10
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	a3 01       	movw	r20, r6
 6c2:	33 d1       	rcall	.+614    	; 0x92a <__ultoa_invert>
 6c4:	88 2e       	mov	r8, r24
 6c6:	86 18       	sub	r8, r6
 6c8:	44 c0       	rjmp	.+136    	; 0x752 <vfprintf+0x2c6>
 6ca:	85 37       	cpi	r24, 0x75	; 117
 6cc:	31 f4       	brne	.+12     	; 0x6da <vfprintf+0x24e>
 6ce:	23 2d       	mov	r18, r3
 6d0:	2f 7e       	andi	r18, 0xEF	; 239
 6d2:	b2 2e       	mov	r11, r18
 6d4:	2a e0       	ldi	r18, 0x0A	; 10
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	25 c0       	rjmp	.+74     	; 0x724 <vfprintf+0x298>
 6da:	93 2d       	mov	r25, r3
 6dc:	99 7f       	andi	r25, 0xF9	; 249
 6de:	b9 2e       	mov	r11, r25
 6e0:	8f 36       	cpi	r24, 0x6F	; 111
 6e2:	c1 f0       	breq	.+48     	; 0x714 <vfprintf+0x288>
 6e4:	18 f4       	brcc	.+6      	; 0x6ec <vfprintf+0x260>
 6e6:	88 35       	cpi	r24, 0x58	; 88
 6e8:	79 f0       	breq	.+30     	; 0x708 <vfprintf+0x27c>
 6ea:	ae c0       	rjmp	.+348    	; 0x848 <vfprintf+0x3bc>
 6ec:	80 37       	cpi	r24, 0x70	; 112
 6ee:	19 f0       	breq	.+6      	; 0x6f6 <vfprintf+0x26a>
 6f0:	88 37       	cpi	r24, 0x78	; 120
 6f2:	21 f0       	breq	.+8      	; 0x6fc <vfprintf+0x270>
 6f4:	a9 c0       	rjmp	.+338    	; 0x848 <vfprintf+0x3bc>
 6f6:	e9 2f       	mov	r30, r25
 6f8:	e0 61       	ori	r30, 0x10	; 16
 6fa:	be 2e       	mov	r11, r30
 6fc:	b4 fe       	sbrs	r11, 4
 6fe:	0d c0       	rjmp	.+26     	; 0x71a <vfprintf+0x28e>
 700:	fb 2d       	mov	r31, r11
 702:	f4 60       	ori	r31, 0x04	; 4
 704:	bf 2e       	mov	r11, r31
 706:	09 c0       	rjmp	.+18     	; 0x71a <vfprintf+0x28e>
 708:	34 fe       	sbrs	r3, 4
 70a:	0a c0       	rjmp	.+20     	; 0x720 <vfprintf+0x294>
 70c:	29 2f       	mov	r18, r25
 70e:	26 60       	ori	r18, 0x06	; 6
 710:	b2 2e       	mov	r11, r18
 712:	06 c0       	rjmp	.+12     	; 0x720 <vfprintf+0x294>
 714:	28 e0       	ldi	r18, 0x08	; 8
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	05 c0       	rjmp	.+10     	; 0x724 <vfprintf+0x298>
 71a:	20 e1       	ldi	r18, 0x10	; 16
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <vfprintf+0x298>
 720:	20 e1       	ldi	r18, 0x10	; 16
 722:	32 e0       	ldi	r19, 0x02	; 2
 724:	f8 01       	movw	r30, r16
 726:	b7 fe       	sbrs	r11, 7
 728:	07 c0       	rjmp	.+14     	; 0x738 <vfprintf+0x2ac>
 72a:	60 81       	ld	r22, Z
 72c:	71 81       	ldd	r23, Z+1	; 0x01
 72e:	82 81       	ldd	r24, Z+2	; 0x02
 730:	93 81       	ldd	r25, Z+3	; 0x03
 732:	0c 5f       	subi	r16, 0xFC	; 252
 734:	1f 4f       	sbci	r17, 0xFF	; 255
 736:	06 c0       	rjmp	.+12     	; 0x744 <vfprintf+0x2b8>
 738:	60 81       	ld	r22, Z
 73a:	71 81       	ldd	r23, Z+1	; 0x01
 73c:	80 e0       	ldi	r24, 0x00	; 0
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 5f       	subi	r16, 0xFE	; 254
 742:	1f 4f       	sbci	r17, 0xFF	; 255
 744:	a3 01       	movw	r20, r6
 746:	f1 d0       	rcall	.+482    	; 0x92a <__ultoa_invert>
 748:	88 2e       	mov	r8, r24
 74a:	86 18       	sub	r8, r6
 74c:	fb 2d       	mov	r31, r11
 74e:	ff 77       	andi	r31, 0x7F	; 127
 750:	3f 2e       	mov	r3, r31
 752:	36 fe       	sbrs	r3, 6
 754:	0d c0       	rjmp	.+26     	; 0x770 <vfprintf+0x2e4>
 756:	23 2d       	mov	r18, r3
 758:	2e 7f       	andi	r18, 0xFE	; 254
 75a:	a2 2e       	mov	r10, r18
 75c:	89 14       	cp	r8, r9
 75e:	58 f4       	brcc	.+22     	; 0x776 <vfprintf+0x2ea>
 760:	34 fe       	sbrs	r3, 4
 762:	0b c0       	rjmp	.+22     	; 0x77a <vfprintf+0x2ee>
 764:	32 fc       	sbrc	r3, 2
 766:	09 c0       	rjmp	.+18     	; 0x77a <vfprintf+0x2ee>
 768:	83 2d       	mov	r24, r3
 76a:	8e 7e       	andi	r24, 0xEE	; 238
 76c:	a8 2e       	mov	r10, r24
 76e:	05 c0       	rjmp	.+10     	; 0x77a <vfprintf+0x2ee>
 770:	b8 2c       	mov	r11, r8
 772:	a3 2c       	mov	r10, r3
 774:	03 c0       	rjmp	.+6      	; 0x77c <vfprintf+0x2f0>
 776:	b8 2c       	mov	r11, r8
 778:	01 c0       	rjmp	.+2      	; 0x77c <vfprintf+0x2f0>
 77a:	b9 2c       	mov	r11, r9
 77c:	a4 fe       	sbrs	r10, 4
 77e:	0f c0       	rjmp	.+30     	; 0x79e <vfprintf+0x312>
 780:	fe 01       	movw	r30, r28
 782:	e8 0d       	add	r30, r8
 784:	f1 1d       	adc	r31, r1
 786:	80 81       	ld	r24, Z
 788:	80 33       	cpi	r24, 0x30	; 48
 78a:	21 f4       	brne	.+8      	; 0x794 <vfprintf+0x308>
 78c:	9a 2d       	mov	r25, r10
 78e:	99 7e       	andi	r25, 0xE9	; 233
 790:	a9 2e       	mov	r10, r25
 792:	09 c0       	rjmp	.+18     	; 0x7a6 <vfprintf+0x31a>
 794:	a2 fe       	sbrs	r10, 2
 796:	06 c0       	rjmp	.+12     	; 0x7a4 <vfprintf+0x318>
 798:	b3 94       	inc	r11
 79a:	b3 94       	inc	r11
 79c:	04 c0       	rjmp	.+8      	; 0x7a6 <vfprintf+0x31a>
 79e:	8a 2d       	mov	r24, r10
 7a0:	86 78       	andi	r24, 0x86	; 134
 7a2:	09 f0       	breq	.+2      	; 0x7a6 <vfprintf+0x31a>
 7a4:	b3 94       	inc	r11
 7a6:	a3 fc       	sbrc	r10, 3
 7a8:	10 c0       	rjmp	.+32     	; 0x7ca <vfprintf+0x33e>
 7aa:	a0 fe       	sbrs	r10, 0
 7ac:	06 c0       	rjmp	.+12     	; 0x7ba <vfprintf+0x32e>
 7ae:	b2 14       	cp	r11, r2
 7b0:	80 f4       	brcc	.+32     	; 0x7d2 <vfprintf+0x346>
 7b2:	28 0c       	add	r2, r8
 7b4:	92 2c       	mov	r9, r2
 7b6:	9b 18       	sub	r9, r11
 7b8:	0d c0       	rjmp	.+26     	; 0x7d4 <vfprintf+0x348>
 7ba:	b2 14       	cp	r11, r2
 7bc:	58 f4       	brcc	.+22     	; 0x7d4 <vfprintf+0x348>
 7be:	b6 01       	movw	r22, r12
 7c0:	80 e2       	ldi	r24, 0x20	; 32
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	76 d0       	rcall	.+236    	; 0x8b2 <fputc>
 7c6:	b3 94       	inc	r11
 7c8:	f8 cf       	rjmp	.-16     	; 0x7ba <vfprintf+0x32e>
 7ca:	b2 14       	cp	r11, r2
 7cc:	18 f4       	brcc	.+6      	; 0x7d4 <vfprintf+0x348>
 7ce:	2b 18       	sub	r2, r11
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <vfprintf+0x34a>
 7d2:	98 2c       	mov	r9, r8
 7d4:	21 2c       	mov	r2, r1
 7d6:	a4 fe       	sbrs	r10, 4
 7d8:	0f c0       	rjmp	.+30     	; 0x7f8 <vfprintf+0x36c>
 7da:	b6 01       	movw	r22, r12
 7dc:	80 e3       	ldi	r24, 0x30	; 48
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	68 d0       	rcall	.+208    	; 0x8b2 <fputc>
 7e2:	a2 fe       	sbrs	r10, 2
 7e4:	16 c0       	rjmp	.+44     	; 0x812 <vfprintf+0x386>
 7e6:	a1 fc       	sbrc	r10, 1
 7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <vfprintf+0x364>
 7ea:	88 e7       	ldi	r24, 0x78	; 120
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <vfprintf+0x368>
 7f0:	88 e5       	ldi	r24, 0x58	; 88
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	b6 01       	movw	r22, r12
 7f6:	0c c0       	rjmp	.+24     	; 0x810 <vfprintf+0x384>
 7f8:	8a 2d       	mov	r24, r10
 7fa:	86 78       	andi	r24, 0x86	; 134
 7fc:	51 f0       	breq	.+20     	; 0x812 <vfprintf+0x386>
 7fe:	a1 fe       	sbrs	r10, 1
 800:	02 c0       	rjmp	.+4      	; 0x806 <vfprintf+0x37a>
 802:	8b e2       	ldi	r24, 0x2B	; 43
 804:	01 c0       	rjmp	.+2      	; 0x808 <vfprintf+0x37c>
 806:	80 e2       	ldi	r24, 0x20	; 32
 808:	a7 fc       	sbrc	r10, 7
 80a:	8d e2       	ldi	r24, 0x2D	; 45
 80c:	b6 01       	movw	r22, r12
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	50 d0       	rcall	.+160    	; 0x8b2 <fputc>
 812:	89 14       	cp	r8, r9
 814:	30 f4       	brcc	.+12     	; 0x822 <vfprintf+0x396>
 816:	b6 01       	movw	r22, r12
 818:	80 e3       	ldi	r24, 0x30	; 48
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	4a d0       	rcall	.+148    	; 0x8b2 <fputc>
 81e:	9a 94       	dec	r9
 820:	f8 cf       	rjmp	.-16     	; 0x812 <vfprintf+0x386>
 822:	8a 94       	dec	r8
 824:	f3 01       	movw	r30, r6
 826:	e8 0d       	add	r30, r8
 828:	f1 1d       	adc	r31, r1
 82a:	80 81       	ld	r24, Z
 82c:	b6 01       	movw	r22, r12
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	40 d0       	rcall	.+128    	; 0x8b2 <fputc>
 832:	81 10       	cpse	r8, r1
 834:	f6 cf       	rjmp	.-20     	; 0x822 <vfprintf+0x396>
 836:	22 20       	and	r2, r2
 838:	09 f4       	brne	.+2      	; 0x83c <vfprintf+0x3b0>
 83a:	4e ce       	rjmp	.-868    	; 0x4d8 <vfprintf+0x4c>
 83c:	b6 01       	movw	r22, r12
 83e:	80 e2       	ldi	r24, 0x20	; 32
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	37 d0       	rcall	.+110    	; 0x8b2 <fputc>
 844:	2a 94       	dec	r2
 846:	f7 cf       	rjmp	.-18     	; 0x836 <vfprintf+0x3aa>
 848:	f6 01       	movw	r30, r12
 84a:	86 81       	ldd	r24, Z+6	; 0x06
 84c:	97 81       	ldd	r25, Z+7	; 0x07
 84e:	02 c0       	rjmp	.+4      	; 0x854 <vfprintf+0x3c8>
 850:	8f ef       	ldi	r24, 0xFF	; 255
 852:	9f ef       	ldi	r25, 0xFF	; 255
 854:	2b 96       	adiw	r28, 0x0b	; 11
 856:	0f b6       	in	r0, 0x3f	; 63
 858:	f8 94       	cli
 85a:	de bf       	out	0x3e, r29	; 62
 85c:	0f be       	out	0x3f, r0	; 63
 85e:	cd bf       	out	0x3d, r28	; 61
 860:	df 91       	pop	r29
 862:	cf 91       	pop	r28
 864:	1f 91       	pop	r17
 866:	0f 91       	pop	r16
 868:	ff 90       	pop	r15
 86a:	ef 90       	pop	r14
 86c:	df 90       	pop	r13
 86e:	cf 90       	pop	r12
 870:	bf 90       	pop	r11
 872:	af 90       	pop	r10
 874:	9f 90       	pop	r9
 876:	8f 90       	pop	r8
 878:	7f 90       	pop	r7
 87a:	6f 90       	pop	r6
 87c:	5f 90       	pop	r5
 87e:	4f 90       	pop	r4
 880:	3f 90       	pop	r3
 882:	2f 90       	pop	r2
 884:	08 95       	ret

00000886 <strnlen_P>:
 886:	fc 01       	movw	r30, r24
 888:	05 90       	lpm	r0, Z+
 88a:	61 50       	subi	r22, 0x01	; 1
 88c:	70 40       	sbci	r23, 0x00	; 0
 88e:	01 10       	cpse	r0, r1
 890:	d8 f7       	brcc	.-10     	; 0x888 <strnlen_P+0x2>
 892:	80 95       	com	r24
 894:	90 95       	com	r25
 896:	8e 0f       	add	r24, r30
 898:	9f 1f       	adc	r25, r31
 89a:	08 95       	ret

0000089c <strnlen>:
 89c:	fc 01       	movw	r30, r24
 89e:	61 50       	subi	r22, 0x01	; 1
 8a0:	70 40       	sbci	r23, 0x00	; 0
 8a2:	01 90       	ld	r0, Z+
 8a4:	01 10       	cpse	r0, r1
 8a6:	d8 f7       	brcc	.-10     	; 0x89e <strnlen+0x2>
 8a8:	80 95       	com	r24
 8aa:	90 95       	com	r25
 8ac:	8e 0f       	add	r24, r30
 8ae:	9f 1f       	adc	r25, r31
 8b0:	08 95       	ret

000008b2 <fputc>:
 8b2:	0f 93       	push	r16
 8b4:	1f 93       	push	r17
 8b6:	cf 93       	push	r28
 8b8:	df 93       	push	r29
 8ba:	fb 01       	movw	r30, r22
 8bc:	23 81       	ldd	r18, Z+3	; 0x03
 8be:	21 fd       	sbrc	r18, 1
 8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <fputc+0x16>
 8c2:	8f ef       	ldi	r24, 0xFF	; 255
 8c4:	9f ef       	ldi	r25, 0xFF	; 255
 8c6:	2c c0       	rjmp	.+88     	; 0x920 <fputc+0x6e>
 8c8:	22 ff       	sbrs	r18, 2
 8ca:	16 c0       	rjmp	.+44     	; 0x8f8 <fputc+0x46>
 8cc:	46 81       	ldd	r20, Z+6	; 0x06
 8ce:	57 81       	ldd	r21, Z+7	; 0x07
 8d0:	24 81       	ldd	r18, Z+4	; 0x04
 8d2:	35 81       	ldd	r19, Z+5	; 0x05
 8d4:	42 17       	cp	r20, r18
 8d6:	53 07       	cpc	r21, r19
 8d8:	44 f4       	brge	.+16     	; 0x8ea <fputc+0x38>
 8da:	a0 81       	ld	r26, Z
 8dc:	b1 81       	ldd	r27, Z+1	; 0x01
 8de:	9d 01       	movw	r18, r26
 8e0:	2f 5f       	subi	r18, 0xFF	; 255
 8e2:	3f 4f       	sbci	r19, 0xFF	; 255
 8e4:	31 83       	std	Z+1, r19	; 0x01
 8e6:	20 83       	st	Z, r18
 8e8:	8c 93       	st	X, r24
 8ea:	26 81       	ldd	r18, Z+6	; 0x06
 8ec:	37 81       	ldd	r19, Z+7	; 0x07
 8ee:	2f 5f       	subi	r18, 0xFF	; 255
 8f0:	3f 4f       	sbci	r19, 0xFF	; 255
 8f2:	37 83       	std	Z+7, r19	; 0x07
 8f4:	26 83       	std	Z+6, r18	; 0x06
 8f6:	14 c0       	rjmp	.+40     	; 0x920 <fputc+0x6e>
 8f8:	8b 01       	movw	r16, r22
 8fa:	ec 01       	movw	r28, r24
 8fc:	fb 01       	movw	r30, r22
 8fe:	00 84       	ldd	r0, Z+8	; 0x08
 900:	f1 85       	ldd	r31, Z+9	; 0x09
 902:	e0 2d       	mov	r30, r0
 904:	09 95       	icall
 906:	89 2b       	or	r24, r25
 908:	e1 f6       	brne	.-72     	; 0x8c2 <fputc+0x10>
 90a:	d8 01       	movw	r26, r16
 90c:	16 96       	adiw	r26, 0x06	; 6
 90e:	8d 91       	ld	r24, X+
 910:	9c 91       	ld	r25, X
 912:	17 97       	sbiw	r26, 0x07	; 7
 914:	01 96       	adiw	r24, 0x01	; 1
 916:	17 96       	adiw	r26, 0x07	; 7
 918:	9c 93       	st	X, r25
 91a:	8e 93       	st	-X, r24
 91c:	16 97       	sbiw	r26, 0x06	; 6
 91e:	ce 01       	movw	r24, r28
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	1f 91       	pop	r17
 926:	0f 91       	pop	r16
 928:	08 95       	ret

0000092a <__ultoa_invert>:
 92a:	fa 01       	movw	r30, r20
 92c:	aa 27       	eor	r26, r26
 92e:	28 30       	cpi	r18, 0x08	; 8
 930:	51 f1       	breq	.+84     	; 0x986 <__ultoa_invert+0x5c>
 932:	20 31       	cpi	r18, 0x10	; 16
 934:	81 f1       	breq	.+96     	; 0x996 <__ultoa_invert+0x6c>
 936:	e8 94       	clt
 938:	6f 93       	push	r22
 93a:	6e 7f       	andi	r22, 0xFE	; 254
 93c:	6e 5f       	subi	r22, 0xFE	; 254
 93e:	7f 4f       	sbci	r23, 0xFF	; 255
 940:	8f 4f       	sbci	r24, 0xFF	; 255
 942:	9f 4f       	sbci	r25, 0xFF	; 255
 944:	af 4f       	sbci	r26, 0xFF	; 255
 946:	b1 e0       	ldi	r27, 0x01	; 1
 948:	3e d0       	rcall	.+124    	; 0x9c6 <__ultoa_invert+0x9c>
 94a:	b4 e0       	ldi	r27, 0x04	; 4
 94c:	3c d0       	rcall	.+120    	; 0x9c6 <__ultoa_invert+0x9c>
 94e:	67 0f       	add	r22, r23
 950:	78 1f       	adc	r23, r24
 952:	89 1f       	adc	r24, r25
 954:	9a 1f       	adc	r25, r26
 956:	a1 1d       	adc	r26, r1
 958:	68 0f       	add	r22, r24
 95a:	79 1f       	adc	r23, r25
 95c:	8a 1f       	adc	r24, r26
 95e:	91 1d       	adc	r25, r1
 960:	a1 1d       	adc	r26, r1
 962:	6a 0f       	add	r22, r26
 964:	71 1d       	adc	r23, r1
 966:	81 1d       	adc	r24, r1
 968:	91 1d       	adc	r25, r1
 96a:	a1 1d       	adc	r26, r1
 96c:	20 d0       	rcall	.+64     	; 0x9ae <__ultoa_invert+0x84>
 96e:	09 f4       	brne	.+2      	; 0x972 <__ultoa_invert+0x48>
 970:	68 94       	set
 972:	3f 91       	pop	r19
 974:	2a e0       	ldi	r18, 0x0A	; 10
 976:	26 9f       	mul	r18, r22
 978:	11 24       	eor	r1, r1
 97a:	30 19       	sub	r19, r0
 97c:	30 5d       	subi	r19, 0xD0	; 208
 97e:	31 93       	st	Z+, r19
 980:	de f6       	brtc	.-74     	; 0x938 <__ultoa_invert+0xe>
 982:	cf 01       	movw	r24, r30
 984:	08 95       	ret
 986:	46 2f       	mov	r20, r22
 988:	47 70       	andi	r20, 0x07	; 7
 98a:	40 5d       	subi	r20, 0xD0	; 208
 98c:	41 93       	st	Z+, r20
 98e:	b3 e0       	ldi	r27, 0x03	; 3
 990:	0f d0       	rcall	.+30     	; 0x9b0 <__ultoa_invert+0x86>
 992:	c9 f7       	brne	.-14     	; 0x986 <__ultoa_invert+0x5c>
 994:	f6 cf       	rjmp	.-20     	; 0x982 <__ultoa_invert+0x58>
 996:	46 2f       	mov	r20, r22
 998:	4f 70       	andi	r20, 0x0F	; 15
 99a:	40 5d       	subi	r20, 0xD0	; 208
 99c:	4a 33       	cpi	r20, 0x3A	; 58
 99e:	18 f0       	brcs	.+6      	; 0x9a6 <__ultoa_invert+0x7c>
 9a0:	49 5d       	subi	r20, 0xD9	; 217
 9a2:	31 fd       	sbrc	r19, 1
 9a4:	40 52       	subi	r20, 0x20	; 32
 9a6:	41 93       	st	Z+, r20
 9a8:	02 d0       	rcall	.+4      	; 0x9ae <__ultoa_invert+0x84>
 9aa:	a9 f7       	brne	.-22     	; 0x996 <__ultoa_invert+0x6c>
 9ac:	ea cf       	rjmp	.-44     	; 0x982 <__ultoa_invert+0x58>
 9ae:	b4 e0       	ldi	r27, 0x04	; 4
 9b0:	a6 95       	lsr	r26
 9b2:	97 95       	ror	r25
 9b4:	87 95       	ror	r24
 9b6:	77 95       	ror	r23
 9b8:	67 95       	ror	r22
 9ba:	ba 95       	dec	r27
 9bc:	c9 f7       	brne	.-14     	; 0x9b0 <__ultoa_invert+0x86>
 9be:	00 97       	sbiw	r24, 0x00	; 0
 9c0:	61 05       	cpc	r22, r1
 9c2:	71 05       	cpc	r23, r1
 9c4:	08 95       	ret
 9c6:	9b 01       	movw	r18, r22
 9c8:	ac 01       	movw	r20, r24
 9ca:	0a 2e       	mov	r0, r26
 9cc:	06 94       	lsr	r0
 9ce:	57 95       	ror	r21
 9d0:	47 95       	ror	r20
 9d2:	37 95       	ror	r19
 9d4:	27 95       	ror	r18
 9d6:	ba 95       	dec	r27
 9d8:	c9 f7       	brne	.-14     	; 0x9cc <__ultoa_invert+0xa2>
 9da:	62 0f       	add	r22, r18
 9dc:	73 1f       	adc	r23, r19
 9de:	84 1f       	adc	r24, r20
 9e0:	95 1f       	adc	r25, r21
 9e2:	a0 1d       	adc	r26, r0
 9e4:	08 95       	ret

000009e6 <_exit>:
 9e6:	f8 94       	cli

000009e8 <__stop_program>:
 9e8:	ff cf       	rjmp	.-2      	; 0x9e8 <__stop_program>
